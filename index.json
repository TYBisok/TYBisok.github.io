[{"content":" 原文地址：http://smalldatum.blogspot.com/2015/11/read-write-space-amplification-pick-2_23.html\n好事成三，现实并非总是如此，有时最多只能选其二。在分布式系统中，CAP，PACELC，FIT 都是被人熟知的例子。数据库引擎也有类似的选择：一个算法最多可以针对读放大（read amplification）、写放大（write amplification）和空间放大（space amplification）的两个进行优化。它们是描述效率和性能的指标，这意味着一个算法不可能同时在读、写和空间都优于另一种算法。例如，B-Tree 相较于 LSM 有着更小的读放大，但 LSM 有着更小的写放大。我将这些指标缩写为 read-amp，write-amp 和 space-amp，也将其称为 framework。\n该 framework 假定数据库工作负载由点查询、长度为 N 的范围查询和写操作组成。如果我添加一个删除操作，那么这将符合 RocksDB 和 LevelDB 的 API。写入是盲写（blind-write）操作，因为再写之前不一定会读取。\n这是该系列文章的第一篇，第二篇文章将使用该框架比较 B-Tree 和 LSM，第三篇文章将论证一个算法不可能使得所有三个指标都最优。\n目的 在评估真实和潜在工作负载的算法时，read-amp，write-amp 和 space-amp 用于解释其性能和效率。它们不能代替大 O 表示法，它们通常假设特定的工作负载和配置，包括 RAM 大小、数据库大小和存储类型。\n我们使用该 framework 来比较 InnoDB 和 RocksDB，因为更好的性能不足以作为选择一个算法的指标。在使用闪存时，耐用性（endurance，write-amp）和容量（capacity，space-amp）很重要，而 IOPs（点查询和范围查询的 read-amp，写入的 write-amp）在使用机械磁盘时很重要。\n该 framework 有助于理解为获得更好的 QPS 所做出的妥协。在写优化的算法中，很容易用写换取空间和读取效率，不过这些做法应当对外说明，因为它们是有代价的。新算法可以通过降低范围读的效率来获得比 RocksDB 更好的写入吞吐量，但 LinkBench 工作负载需要高效的写入和范围读性能。\n该 framework 是有用的，因为 key comparisons 的方式并不总能产生“正确”的结果。传统的算法分析方法非常适合限制 key comparisions 的数量，从而了解算法在内存中的性能。但是当比较键（key）部分来自cache，部分来自 RAM 或者 Disk时，大O表示法很难比较算法间的优劣。常量因子很重要，每个查询1.2次或1.5次的读盘会带来很大的差异。\n读放大 Read-amp 是指完成一个逻辑读取操作所需的工作量。所谓工作量在不同类型的数据库中定义相异，包括内存型数据库，无缓存（最坏情况）的持久性数据库，或者有缓存的（平均情况）的持久性数据库。在内存型数据库中，工作量可以是键的比较次数，或者传统算法分析所用的指标。在持久性数据库中，工作量包括了传输的字节数和磁盘寻道次数（寻道次数对磁盘很重要，对 NVM 可忽略）。工作量也包括了从存储介质中读取数据的解药成本。\nRead-amp 在点查询和范围查询中的定义不同。对于范围查询，查询的范围很重要（要获取的行数）。在 Linkbench 中，范围查询平均获取20行数据。\n对于不存在的键的点查询，也可以定义 Read-amp。一些算法使用布隆过滤器来避免对不存在的键的磁盘IO。对不存在的键的查询在某些工作负载中很常见。布隆过滤器不适合范围查询。Linkbench 中最频繁的查询是范围查询，它在范围查询索引的前两列上包含一个等值谓词。在 RocksDB 中，可以定义一个前缀布隆过滤器，而从中获益。\n写放大 Write-amp 是指完成一个写操作所需的工作量，可以是每个逻辑写操作写入存储介质的字节数或者磁盘的寻道次数。它也可以分为内存写放大和磁盘写放大，不过我通常忽略内存写放大。\n一次逻辑写通常伴随着对存储读取和写入的代价，我们通常会忽略写放大中的读取代价。对于像 B-Tree 这种就地更新的算法，读取成本紧随而来，因为得先读取页面内容才能修改它。对于像 LSM 这样的写入优化算法，读取成本被推迟产生，因为压缩是在后台完成的，并且与逻辑写入分离。不过也有些未能延迟的写入成本：更新内存结构（跳表）和写入 redo log。\n对于闪存来说，通常会有额外的写操作，即由 FTL 进行的垃圾回收，以提供可以被重写的闪存块。因此需谨慎假设写优化数据库引擎中，顺序写入和大量写入所带来的好处。虽然 NAND 芯片上的物理擦除块不大，但许多存储设备在进行 GC 时都有一些跨物理擦除块的东西，我将其称为逻辑擦除块。当不同生命周期的数据在同一个逻辑擦除块中时，生命周期长的数据会被被复制出来，从而增加 GC 过程中的 write-amp（WAF 大于1）。期待 multi-stream 的带来，以减少闪存 GC WAF。\n空间放大 Space-amp 是指数据库大小与数据库中数据大小的比值。Space-amp 可通过压缩见减小，也会因为 B-Tree 的碎片和 LSM 的旧版本行而增大。由于每 GB 存储容量的价格，对闪存而言，较低的 space-amp 比磁盘更重要。\n效率与性能 我在小型数据系统上工作，小数据也是 OLTP 的别称。小数据的工作负载是高并发的，随着并发性的提高，更高的效率通常意味着更好的性能，但性能和效率并不总是紧密相关的。例如，对于范围查询来说，一个 read-amp 很大的算法可能hi通过并行执行磁盘读取来隐藏额外的延迟，这可以改善响应时间，但不能改善效率。较小 read-amp 的算法可以在高并发性下维持更大的 QPS。\n","permalink":"https://tybisok.github.io/posts/read-write-space-amplification-pick-2/","summary":"原文地址：http://smalldatum.blogspot.com/2015/11/read-write-space-amplification-pick-2_23.html\n好事成三，现实并非总是如此，有时最多只能选其二。在分布式系统中，CAP，PACELC，FIT 都是被人熟知的例子。数据库引擎也有类似的选择：一个算法最多可以针对读放大（read amplification）、写放大（write amplification）和空间放大（space amplification）的两个进行优化。它们是描述效率和性能的指标，这意味着一个算法不可能同时在读、写和空间都优于另一种算法。例如，B-Tree 相较于 LSM 有着更小的读放大，但 LSM 有着更小的写放大。我将这些指标缩写为 read-amp，write-amp 和 space-amp，也将其称为 framework。\n该 framework 假定数据库工作负载由点查询、长度为 N 的范围查询和写操作组成。如果我添加一个删除操作，那么这将符合 RocksDB 和 LevelDB 的 API。写入是盲写（blind-write）操作，因为再写之前不一定会读取。\n这是该系列文章的第一篇，第二篇文章将使用该框架比较 B-Tree 和 LSM，第三篇文章将论证一个算法不可能使得所有三个指标都最优。\n目的 在评估真实和潜在工作负载的算法时，read-amp，write-amp 和 space-amp 用于解释其性能和效率。它们不能代替大 O 表示法，它们通常假设特定的工作负载和配置，包括 RAM 大小、数据库大小和存储类型。\n我们使用该 framework 来比较 InnoDB 和 RocksDB，因为更好的性能不足以作为选择一个算法的指标。在使用闪存时，耐用性（endurance，write-amp）和容量（capacity，space-amp）很重要，而 IOPs（点查询和范围查询的 read-amp，写入的 write-amp）在使用机械磁盘时很重要。\n该 framework 有助于理解为获得更好的 QPS 所做出的妥协。在写优化的算法中，很容易用写换取空间和读取效率，不过这些做法应当对外说明，因为它们是有代价的。新算法可以通过降低范围读的效率来获得比 RocksDB 更好的写入吞吐量，但 LinkBench 工作负载需要高效的写入和范围读性能。\n该 framework 是有用的，因为 key comparisons 的方式并不总能产生“正确”的结果。传统的算法分析方法非常适合限制 key comparisions 的数量，从而了解算法在内存中的性能。但是当比较键（key）部分来自cache，部分来自 RAM 或者 Disk时，大O表示法很难比较算法间的优劣。常量因子很重要，每个查询1.2次或1.5次的读盘会带来很大的差异。\n读放大 Read-amp 是指完成一个逻辑读取操作所需的工作量。所谓工作量在不同类型的数据库中定义相异，包括内存型数据库，无缓存（最坏情况）的持久性数据库，或者有缓存的（平均情况）的持久性数据库。在内存型数据库中，工作量可以是键的比较次数，或者传统算法分析所用的指标。在持久性数据库中，工作量包括了传输的字节数和磁盘寻道次数（寻道次数对磁盘很重要，对 NVM 可忽略）。工作量也包括了从存储介质中读取数据的解药成本。","title":"Read Write Space Amplification Pick 2"},{"content":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!\n","permalink":"https://tybisok.github.io/posts/my-first-post/","summary":"Introduction This is bold text, and this is emphasized text.\nVisit the Hugo website!","title":"My First Post"}]